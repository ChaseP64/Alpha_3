name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # ------------------------------------------------------------------
      # Linux‑specific prerequisites (Mesa for VTK)
      # ------------------------------------------------------------------
      - name: Install system libs for VTK
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libgl1-mesa-dev

      # ------------------------------------------------------------------
      # Environment variable to enable off‑screen rendering
      # ------------------------------------------------------------------
      - name: Set VTK off-screen env
        run: echo "VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN=ON" >> $GITHUB_ENV

      # ------------------------------------------------------------------
      # Install Python dev dependencies (extras)  
      # ------------------------------------------------------------------
      - name: Install dev extras
        run: |
          python -m pip install --upgrade pip
          # Install the local package with the "dev" extra (ruff, pytest, mypy, …)
          pip install ".[dev]"

      # ------------------------------------------------------------------
      # Ruff lint
      # ------------------------------------------------------------------
      - name: Ruff lint
        run: ruff check .

      # ------------------------------------------------------------------
      # Static type-checking (loose)
      # ------------------------------------------------------------------
      - name: Type check (mypy)
        run: mypy .

      # ------------------------------------------------------------------
      # Test suite & coverage
      # ------------------------------------------------------------------
      - name: Test & coverage
        run: pytest -q --cov=digcalc_project --cov-report=xml

      # ------------------------------------------------------------------
      # Enforce coverage threshold (84 %) – optional
      # ------------------------------------------------------------------
      - name: Enforce coverage threshold
        run: |
          python - <<'PY'
          import xml.etree.ElementTree as ET, sys, pathlib
          cov_file = pathlib.Path('coverage.xml')
          if not cov_file.exists():
              print('coverage.xml not found – skipping threshold check.')
              sys.exit(1)
          cov = float(ET.parse(cov_file).getroot().get('line-rate')) * 100
          print(f'Coverage: {cov:.1f}% (required ≥ 84%)')
          sys.exit(0 if cov >= 84 else 1)
          PY 